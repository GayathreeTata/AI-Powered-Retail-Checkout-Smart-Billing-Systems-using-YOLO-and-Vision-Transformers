# -*- coding: utf-8 -*-
"""AI Smart bill checkout.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-RmPL7aghYRUL0RQJ0Iw9Ut-IFeIN_e7
"""

pip install ultralytics transformers torch torchvision opencv-python numpy pandas

import cv2
import torch
import numpy as np
from ultralytics import YOLO

# Load YOLOv8 model (pretrained on COCO dataset)
yolo_model = YOLO("yolov8n.pt")

# Load class labels from COCO dataset
COCO_CLASSES = {
    0: "person", 1: "bicycle", 2: "car", 3: "motorcycle", 4: "airplane", 5: "bus",
    44: "bottle", 47: "cup", 48: "fork", 49: "knife", 50: "spoon", 51: "bowl",
    52: "banana", 53: "apple", 54: "sandwich", 55: "orange", 56: "broccoli", 57: "carrot",
    58: "hot dog", 59: "pizza", 60: "donut", 61: "cake", 62 : "tablet" ,64 :"esez-dsr"
}

# Load price mapping for detected items
PRICE_LIST = {
    "bottle": 1.5, "cup": 2.0, "bowl": 3.5,
    "banana": 0.5, "apple": 1.0, "sandwich": 4.0,
    "orange": 0.8, "broccoli": 2.5, "carrot": 1.2,
    "pizza": 5.0, "donut": 1.8, "cake": 3.0,
    "tablet":100.0, "esez-dsr": 217.48
}

# Load image (or live webcam feed)
image = cv2.imread("test_checkout.jpg")
results = yolo_model(image)

# Extract detected objects
detected_items = []
for result in results:
    for box in result.boxes:
        class_id = int(box.cls[0])
        label = COCO_CLASSES.get(class_id, "unknown")
        if label in PRICE_LIST:
            detected_items.append(label)

print("Detected Items:", detected_items)

from transformers import ViTForImageClassification, ViTFeatureExtractor
from PIL import Image

# Load pre-trained Vision Transformer model
model = ViTForImageClassification.from_pretrained("google/vit-base-patch16-224")
feature_extractor = ViTFeatureExtractor.from_pretrained("google/vit-base-patch16-224")

def classify_item(image_path):
    image = Image.open(image_path).convert("RGB")
    inputs = feature_extractor(images=image, return_tensors="pt")

    # Perform classification
    with torch.no_grad():
        outputs = model(**inputs)
        predicted_label = outputs.logits.argmax(-1).item()

    return model.config.id2label[predicted_label]

# Example classification
# classified_item = classify_item("test_item.jpg")
# classified_item = classify_item("test_item1.jpg")
classified_item1 = classify_item("test_image.jpg")
print("Classified Item:", classified_item)
print("Classified Item1:", classified_item1)

import pandas as pd

# Assuming classified_item is a string like 'pizza, pizza pie'
# Split the string into individual items
classified_items = [item.strip() for item in classified_item1.split(',')]

# Calculate total bill, handling potential KeyErrors
bill = sum(PRICE_LIST.get(item, 0) for item in classified_items if item in PRICE_LIST)


# Generate bill summary
# Create a DataFrame with detected items and prices
bill_summary = pd.DataFrame({"Item": classified_items})
bill_summary["Price"] = bill_summary["Item"].map(PRICE_LIST).fillna(0)  # Handle missing prices
print("\nðŸ›’ Smart Billing System ðŸ›’\n", bill_summary)
print("\nTotal Bill: $", round(bill, 2))

"""for multiple items in a single bill

"""

import pandas as pd
from collections import Counter

# Sample detected items (Replace this with YOLO's output)
detected_items = ["esez-dsr", "zincovit","becomplex","acenav mr","acenav mr"]  # Example multiple items

# Define price list
PRICE_LIST = {
    "esez-dsr": 215.0,
    "zincovit": 86.5,
    "becomplex": 18.0,
    "acenav mr": 300.0
}

# Count occurrences of each item
item_counts = Counter(detected_items)

# Create billing summary
bill_summary = pd.DataFrame(item_counts.items(), columns=["Item", "Quantity"])
bill_summary["Price per unit"] = bill_summary["Item"].map(PRICE_LIST)
bill_summary["Total Price"] = bill_summary["Quantity"] * bill_summary["Price per unit"]

# Display bill
print("\nðŸ›’ Smart Billing System ðŸ›’\n", bill_summary)
print("\nðŸ’° Grand Total: Rs", round(bill_summary["Total Price"].sum(), 2))